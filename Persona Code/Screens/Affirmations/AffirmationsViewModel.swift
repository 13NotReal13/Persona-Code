//
//  AffirmationsViewModel.swift
//  Persona Code
//
//  Created by –ò–≤–∞–Ω –°–µ–º–∏–∫–∏–Ω on 03/03/2025.
//

import Foundation
import SwiftUI

final class AffirmationsViewModel: ObservableObject {
    static let shared = AffirmationsViewModel()
    
    @Published var selectedCategory: AffirmationCategoryType = .all
    @AppStorage("showFavoritesOnly") var showFavoritesOnly: Bool = false
    @AppStorage("currentLanguage") private var currentLanguage: String = "en"
    
    @Published private(set) var affirmations: [Affirmation] = []

    let categories = AffirmationCategoryType.allCases
    
    /// –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–π
    var filteredAffirmations: [Affirmation] {
        let filteredByFavorites = showFavoritesOnly
            ? affirmations.filter { $0.isFavorite }
            : affirmations
        
        if selectedCategory == .all {
            return filteredByFavorites
        } else {
            return filteredByFavorites.filter { $0.category == selectedCategory }
        }
    }
    
    private init() {
        loadAffirmations()
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) { // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
            self.loadFavorites()
        }
    }

    /// –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
    func loadAffirmations() {
        switch currentLanguage {
        case "pl":
            affirmations = AffirmationsStorage_PL.shared.allAffirmations
        case "ru":
            affirmations = AffirmationsStorage_RU.shared.allAffirmations
        default:
            affirmations = AffirmationsStorage_EN.shared.allAffirmations
        }
    }
    
    func saveFavorites() {
        let favoriteIDs = Set(affirmations.filter { $0.isFavorite }.map { $0.id })

        if let encoded = try? JSONEncoder().encode(favoriteIDs) {
            UserDefaults.standard.set(encoded, forKey: "favoriteAffirmations")
        }
    }
    
    func loadFavorites() {
        if let savedData = UserDefaults.standard.data(forKey: "favoriteAffirmations"),
           let decodedFavorites = try? JSONDecoder().decode(Set<UUID>.self, from: savedData) {
            DispatchQueue.main.async {
                self.affirmations = self.affirmations.map { affirmation in
                    var mutableAffirmation = affirmation
                    mutableAffirmation.isFavorite = decodedFavorites.contains(affirmation.id)
                    return mutableAffirmation
                }
            }
        }
    }
    
    /// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    func toggleFavorite(for affirmation: Affirmation) {
        if let index = affirmations.firstIndex(where: { $0.id == affirmation.id }) {
            objectWillChange.send() // üîπ –°–æ–æ–±—â–∞–µ–º SwiftUI –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            var updatedAffirmation = affirmations[index] // üîπ –ö–æ–ø–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç
            updatedAffirmation.isFavorite.toggle() // üîπ –ú–µ–Ω—è–µ–º –µ–≥–æ
            affirmations[index] = updatedAffirmation // üîπ –ó–∞–º–µ–Ω—è–µ–º –≤ –º–∞—Å—Å–∏–≤–µ
            saveFavorites()
        }
    }
}
